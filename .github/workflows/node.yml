name: dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Install
      run: npm i

    - name: Test
      run: npm test
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: node_app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set RDS_URL
      run: echo ::set-output name=RDS_URL::$(aws rds describe-db-instances --output text --query "DBInstances[?DBClusterIdentifier == 'dev-node-app-rds'].Endpoint.Address")
      id: rds
  
    - name: Generate task definition file
      run: aws ecs describe-task-definition --task-definition go_redis_task_definition  --query taskDefinition > service.json

    - name: Replace task definition
      uses: datamonsters/replace-action@v2
      with:
        files: 'service.json'
        replacements: 'DOCKER_IMAGE=${{ steps.login-ecr.outputs.registry }}/node_app:${{ github.sha }},TEMPLATE_DB_HOST=${{ steps.rds.outputs.RDS_URL }},TEMPLATE_DB_PASSWORD=${{ secrets.RDS_PASSWORD }},TEMPLATE_DB_USER=${{ secrets.RDS_USER }}'

    - name: Read file
      run: cat tasks-definition/service.json
      
    - name: Amazon ECS "Deploy Task Definition" Action for GitHub Actions
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: tasks-definition/service.json
        service: go-redis
        cluster: go-redis

    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
